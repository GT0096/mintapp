import Head from 'next/head'
import {useState} from 'react'
import {create} from 'ipfs-http-client'
import { createRaribleSdk } from "@rarible/sdk"
import { toCollectionId, toUnionAddress } from "@rarible/types"
// import { MintType } from "@rarible/sdk/build/types/nft/mint/domain"
// import IPFS from 'ipfs-http-client'
import styles from '../styles/Home.module.css'
// import axios from 'axios'
const client = create('http://127.0.0.1:5001/api/v0')




// ====================================================================


export default function Home() {
  const [account, setAccount] = useState(null)
  const [file, setFile] = useState(null)
  const [createObjectURL, setCreateObjectURL] = useState('');
  const [imgRes, setImgRes] = useState({});


  // const [metadata, setMetadata] = useState({
  //     "name": '',
  //     "description": '',
  //     "image":'',
  //     "external_url":``,
  //     "attributes":[],
  //     })






const fileSelectHandler = (e) => {
  const i = e.target.files[0];
  setFile(i);
  console.log(i)
 
  console.log(URL.createObjectURL(i))
  setCreateObjectURL(URL.createObjectURL(i));
  console.log(URL.createObjectURL(i));
  

} 
console.log(file)
console.log(createObjectURL)
 const [formValue, setFormValue] = useState({
  name:"",
  desc: "",
 });
  const handleChange = (e) => {
    const {name, value} = e.target;
    setFormValue((prevState) =>{
      return {
        ...prevState,
        [name] : value,
      };
    });
    console.log(formValue);
     };


    //  const uploadmeta =  () => {
    //   setMetadata({
    //     "name": formValue.name,
    //     "description": formValue.desc,
    //     "image":createObjectURL,
    //     "external_url":`https://app.rarible.com/${account}:123913`,
    //     "attributes":[],
    //     })
    //     console.log(metadata)
    // }



  const updateForm = async (e) => {
    e.preventDefault();

    try {
//       const ipfs = await IPFS.create('https://ipfs.infura.io:5001/api/v0')

//   const  cid  = await ipfs.add(file)
//  console.log(cid)
  const  added = await client.add(file)
  console.log(added)
  const url = `https://ipfs.infura.io/ipfs/${added.path}`
  console.log(url);


  const metadata = JSON.stringify({
    "name": formValue.name,
    "description": formValue.desc,
    "image":url,
    "external_url":`https://app.rarible.com/${account}:123913`,
    "attributes":[],
    })
    console.log(metadata)

 const metaObj = await client.add(metadata)
 console.log(metaObj);
 const metaUrl = `https://ipfs.infura.io/ipfs/${metaObj.path}`
  console.log(metaUrl)


// =================================================

// const mintAction = await sdk.nft.mint({
//   collectionId: toCollectionId(ethereum:account)
// })
// console.log(mintAction);

    }catch (error) {
  console.log('Error uploading', error)
}

// ============================================




// try {
// //  await uploadmeta().then(console.log(client.add(metadata)))

// //     console.log(metadata);
   
//     // const metaObj = await client.add(metadata);
//     // console.log(metaObj);
// } catch (error) {
//   console.log(error)
// }
}





const loadMetamask = async () => {
  // You need to await for user response on the metamask popup dialog
  const accounts = await ethereum.request({ method: 'eth_requestAccounts' });
  if(accounts){
    setAccount(accounts[0])
     console.log(accounts[0]);
  }
}


  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

  <form   method="post">
  <label>Name:</label>
  <input type="text" id="first" name="name" onChange={handleChange} />
  <label>Description:</label>
  <textarea id="last" name="desc" onChange={handleChange}/>
  <input type="file"  name='file' onChange={fileSelectHandler}
/>
  <button type="submit" onClick={updateForm}>Submit</button>
  
</form>
<div>
  <img src={createObjectURL} alt="img" width={200} height={200} />
  </div>

  <div>
     
     <h2>{account}</h2>
         <button
           onClick={()=>loadMetamask()}
         >Connect to Metamask</button>
 
     </div>

      
    </div>
  )
}
